rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Add this inside gameResults match block for data validation
    function isValidGameResult() {
      return request.resource.data.keys().hasAll(['userId', 'score', 'quarterId']) &&
            request.resource.data.userId is string &&
            request.resource.data.score is number &&
            request.resource.data.quarterId is string;
    }

    // Add rate limiting for read operations
    function notTooManyReads() {
      return request.time.toMillis() - 
            resource.data.lastRead.toMillis() > 1000;
    }

    // Base rules
    match /quarters/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Public feature flags
    match /features/{featureId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Game results
    match /gameResults/{resultId} {
      allow read: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if isSignedIn() && 
                  (request.auth.uid == userId || isAdmin());
      allow write: if isSignedIn() && request.auth.uid == userId;
    }
    
    // Admin access to profiles
    match /profiles/{document=**} {
      allow read: if isAdmin();
    }

    // Player profiles collection
    match /playerProfiles/{userId} {
      allow read: if isSignedIn() && 
                  (request.auth.uid == userId || isAdmin());
      allow write: if isSignedIn() && request.auth.uid == userId;
    }
  }
}